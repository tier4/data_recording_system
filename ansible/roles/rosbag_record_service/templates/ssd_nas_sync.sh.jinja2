#!/bin/bash

TIME=`date +"%Y/%m/%d_%H:%M:%S"`
echo "============= start ssd_nas_sync.sh ${TIME} ==============="

#backup SSD to NAS
RECORD_ROOT_DIR="{{ local_storages.prefix }}"
DEST_DIR="{{ record_root_directory }}"

# determine source directory based on the current hour
HOUR=$(date +"%H" | sed 's/^0//')
if [ $(( ${HOUR} % 2 )) -eq 0 ]; then
    SUFFIX=2
else
    SUFFIX=1
fi
SOURCE_DIR=${RECORD_ROOT_DIR}${SUFFIX}/
echo "source directory: $SOURCE_DIR"
echo "destination directory: $DEST_DIR"


# delete empty folders
DIRS=($(find $SOURCE_DIR -mindepth 2 -maxdepth 2 -type d))
for DIR in "${DIRS[@]}"; do
    DIR_SIZE=$(du -sb "$DIR" | awk '{print $1}')
    if [ "$DIR_SIZE" -le 4100 ]; then
        rm -r $DIR
    fi
done

# check if rsync process is running
process=`pgrep rsync | wc -l`
echo "existing process num: $process"
while [ "$process" -gt 1 ]; do
    # kill existing rsync process
    ps aux | grep rsync | grep -v grep | awk '{ print "kill ", $2 }' | sh
    sleep 1
    process=`pgrep rsync | wc -l`
    echo "existing process num: $process"
done

# check if NAS is mounted
if mount | grep -q $DEST_DIR; then
    echo "NAS is mounted. Start copying."
    # nice -n 19 rsync -au --partial --remove-source-files $SOURCE_DIR $DEST_DIR --exclude lost+found/
    nice -n 19 rsync -au --partial --bwlimit=100000 $SOURCE_DIR $DEST_DIR --exclude lost+found/
else
    echo "Error: NAS is not mounted."
    exit 1
fi

ENDTIME=`date +"%Y/%m/%d_%H:%M:%S"`
echo "============= end ssd_nas_sync.sh (${TIME}) @ ${ENDTIME} ==============="
exit 0
